name: Build OnePlus SukiSU Ultra
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "CPU分支"
        required: true
        type: choice
        options:
          - 'sm8650'
          - 'sm8550'
          - 'sm8450'
          - 'sm8475'
          - 'sm7675'
        default: 'sm8650'
      FEIL:
        description: "手机型号"
        required: true
        type: choice
        options:
          - 'oneplus_12'
          - 'oneplus_ace3_pro'
          - 'oneplus_ace5'
          - 'oneplus_pad2'
          - 'oneplus_11'
          - 'oneplus_12r'
          - 'oneplus_ace2pro'
          - 'oneplus_ace3'
          - 'oneplus_open'
          - 'oneplus_10t'
          - 'oneplus_11r'
          - 'oneplus_ace2'
          - 'oneplus_ace_pro'
          - 'oneplus_10_pro'
          - 'oneplus_ace_3v'
          - 'other'
        default: 'oneplus_12'
      CPUD:
        description: "处理器代号"
        required: true
        type: choice
        options:
          - 'pineapple'
          - 'kalama'
          - 'waipio'
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        type: choice
        options:
          - 'android14'
          - 'android13'
          - 'android12'
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        type: choice
        options:
          - '6.1'
          - '5.15'
          - '5.10'
        default: '6.1'
      KERNEL_SUFFIX:
        description: '内核名称修改(可改中文和emoji)'
        required: true
        default: '-Coolapk@Suxiaoqing'
      KPM_ext:
       description: "是否启用KPM补丁修补"
       required: true
       type: choice
       options:
          - 'true'
          - 'false'
       default: 'false'
      lz4kd:
       description: "是否启用lz4kd"
       required: true
       type: choice
       options:
          - 'Open'
          - 'Close'
       default: 'Open'
      sched_ext:
       description: "是否刷入风驰内核调度"
       required: true
       type: choice
       options:
          - 'true'
          - 'false'
       default: 'false'
        
jobs:
  build:
    name: For ${{ github.event.inputs.FEIL }} lz4kd ${{ github.event.inputs.lz4kd }} sched_ext ${{ github.event.inputs.sched_ext }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    steps:
      - name: 🚀 Maximize build space (最大化构建空间)
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: ✅ Validate inputs (验证输入参数)
        run: |
          # 验证内核版本
          case "${{ github.event.inputs.KERNEL_VERSION }}" in
            "6.1"|"5.15"|"5.10")
              echo "Valid kernel version: ${{ github.event.inputs.KERNEL_VERSION }}"
              ;;
            *)
              echo "Unsupported kernel version: ${{ github.event.inputs.KERNEL_VERSION }}"
              exit 1
              ;;
          esac
          
          # 验证Android版本
          case "${{ github.event.inputs.ANDROID_VERSION }}" in
            "android14"|"android13"|"android12")
              echo "Valid Android version: ${{ github.event.inputs.ANDROID_VERSION }}"
              ;;
            *)
              echo "Unsupported Android version: ${{ github.event.inputs.ANDROID_VERSION }}"
              exit 1
              ;;
          esac

      - name: 📦 Configure Git
        run: |
         git config --global user.name "bulid"
         git config --global user.email "2210077278@qq.com"

      - name: 📦 Install dependencies (安装依赖)
        run: |
         sudo apt update && sudo apt upgrade -y
         sudo apt install -y python3 git curl ccache libelf-dev
         
      - name: 📥 Restore ccache (恢复 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-
            
      - name: 📥 Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync (克隆内核源码)
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/Xiaomichael/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo sync
         rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
         # 修改setlocalversion脚本
         for script in kernel_platform/common/scripts/setlocalversion kernel_platform/msm-kernel/scripts/setlocalversion kernel_platform/external/dtc/scripts/setlocalversion; do
           if [[ -f "$script" ]]; then
             sed -i 's/ -dirty//g' "$script"
             sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$script"
             sed -i '$s|echo "\$res"|echo "-oki${{ github.event.inputs.KERNEL_SUFFIX }}-v$(date +%Y%m%d)"|' "$script"
           fi
         done
          
      - name: ⚙️ Set up SukiSU Ultra (配置 SukiSU Ultra)
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          
      - name: 🔧 Set up SUSFS
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/Xiaomichael/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          
          # Copy SUSFS patches
          if [[ -f "../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch" ]]; then
            cp "../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch" ./common/
          else
            echo "SUSFS patch not found for this version combination"
            exit 1
          fi
          
          cp ../kernel_patches/next/syscall_hooks.patch ./common/
          cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          if [[ "${{ github.event.inputs.lz4kd }}" == "Open" ]]; then
            # Copy lz4k from ShirkNeko
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib/
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto/
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi
          
          cd ./common
          
          # Apply patches with better error handling
          if ! patch -p1 < "50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch"; then
            echo "WARNING: SUSFS patch failed to apply cleanly"
          fi
          
          if [[ -f "../../kernel_patches/69_hide_stuff.patch" ]]; then
            cp ../../kernel_patches/69_hide_stuff.patch ./
            if ! patch -p1 -F 3 < 69_hide_stuff.patch; then
              echo "WARNING: Hide stuff patch failed to apply"
            fi
          fi
          
          if ! patch -p1 -F 3 < syscall_hooks.patch; then
            echo "ERROR: Syscall hooks patch failed to apply"
            exit 1
          fi
          
          if [[ "${{ github.event.inputs.lz4kd }}" == "Open" ]]; then
            if [[ -f "../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch" ]]; then
              cp "../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch" ./
              patch -p1 -F 3 < lz4kd.patch || echo "WARNING: lz4kd patch failed"
            fi
            
            if [[ -f "../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4k_oplus.patch" ]]; then
              cp "../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4k_oplus.patch" ./
              patch -p1 -F 3 < lz4k_oplus.patch || echo "WARNING: lz4k_oplus patch failed"
            fi
          fi
          
      - name: 🎮 Add sched_ext (风驰游戏内核调度)
        if: ${{ github.event.inputs.sched_ext == 'true' }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git --depth=1
         
         # 验证sched_ext源码
         if [[ ! -d "./sched_ext" ]]; then
           echo "ERROR: Failed to clone sched_ext repository"
           exit 1
         fi
         
         echo "📋 Contents of sched_ext directory:"
         ls -la ./sched_ext/
         
         # 创建目标目录
         mkdir -p ./common/kernel/sched/ext
         
         # 安全地复制sched_ext文件，排除.git目录
         find ./sched_ext -type f ! -path "*/.git/*" -exec cp {} ./common/kernel/sched/ \; 2>/dev/null || true
         
         # 如果存在ext子目录，单独处理
         if [[ -d "./sched_ext/ext" ]]; then
           cp -r ./sched_ext/ext/* ./common/kernel/sched/ext/ 2>/dev/null || true
         fi
         
         # 清理临时目录
         rm -rf ./sched_ext

      - name: 🔧 Apply kernel configurations (应用内核配置)
        run: |
          cd kernel_workspace/kernel_platform
          
          # 基础KSU配置
          cat >> ./common/arch/arm64/configs/gki_defconfig << 'EOF'
          # KernelSU Configuration
          CONFIG_KSU=y
          CONFIG_KPM=y
          CONFIG_KSU_MANUAL_HOOK=y
          
          # SUSFS Configuration
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          
          # BBR
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_DEFAULT_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF
          
          # lz4kd配置
          if [[ "${{ github.event.inputs.lz4kd }}" == "Open" ]]; then
            cat >> ./common/arch/arm64/configs/gki_defconfig << 'EOF'
          
          # LZ4KD Configuration
          CONFIG_ZSMALLOC=y
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          CONFIG_CRYPTO_LZ4K_OPLUS=y
          CONFIG_ZRAM_WRITEBACK=y
          EOF
            echo "✅ lz4kd configuration added"
          fi
          
          # 移除defconfig检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
          echo "📋 Final kernel configuration:"
          tail -20 ./common/arch/arm64/configs/gki_defconfig
          
      - name: 🔨 Build Kernel (构建内核)
        run: |
          cd kernel_workspace/kernel_platform
          
          # 设置编译环境
          export PATH="/usr/lib/ccache:$PATH"
          
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]]; then
            # Kernel 6.1 构建
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
            
            cd common
            echo "🔧 Building kernel 6.1 with Clang..."
            make -j$(nproc --all) \
              LLVM=1 \
              ARCH=arm64 \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CC=clang \
              RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
              PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
              LD=ld.lld \
              HOSTLD=ld.lld \
              O=out \
              KCFLAGS+=-O2 \
              CONFIG_LTO_CLANG=y \
              CONFIG_LTO_CLANG_THIN=y \
              CONFIG_LTO_CLANG_FULL=n \
              CONFIG_LTO_NONE=n \
              gki_defconfig all
              
          elif [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "5.15" ]] || [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "5.10" ]]; then
            # Kernel 5.15/5.10 构建
            echo "🔧 Building kernel ${{ github.event.inputs.KERNEL_VERSION }} with oplus build script..."
            cd ..
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          else
            echo "❌ Unsupported kernel version: ${{ github.event.inputs.KERNEL_VERSION }}"
            exit 1
          fi
          
          echo "✅ Kernel build completed"
          
      - name: 📦 Package kernel to AnyKernel3 (打包内核到 AnyKernel3)
        run: |
          git clone https://github.com/Suxiaoqinx/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          
          # 搜索Image文件的可能位置
          possible_dirs=(
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/common/out/arch/arm64/boot/"
          )
          
          image_path=""
          for dir in "${possible_dirs[@]}"; do
            if [[ -f "${dir}Image" ]]; then
              image_path="${dir}Image"
              echo "✅ Found Image at: $image_path"
              break
            fi
          done
          
          # 通用搜索
          if [[ -z "$image_path" ]]; then
            image_path=$(find "./kernel_workspace/kernel_platform/" -name "Image" -type f | head -n 1)
          fi
          
          if [[ -n "$image_path" ]] && [[ -f "$image_path" ]]; then
            # 确保目标目录存在
            mkdir -p "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
            target_dir="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
            
            # 复制到标准位置
            if [[ "$(realpath "$image_path")" != "$(realpath "${target_dir}Image")" ]]; then
              cp "$image_path" "${target_dir}Image"
            fi
            
            # 复制到AnyKernel3
            cp "${target_dir}Image" ./AnyKernel3/Image
            echo "✅ Image successfully packaged"
            
            # 显示文件信息
            ls -lh "${target_dir}Image"
            ls -lh ./AnyKernel3/Image
          else
            echo "❌ ERROR: Image file not found, build may have failed"
            echo "Searching for any kernel images..."
            find "./kernel_workspace/kernel_platform/" -name "*Image*" -type f
            exit 1
          fi
         
      - name: 🛠️ KPM Patching Image Files (KPM 修补 Image 文件)
        if: ${{ github.event.inputs.KPM_ext == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist
          echo "🔄 Downloading KPM patcher..."
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11.4/patch_linux
          chmod +x patch_linux
          
          if [[ -f "Image" ]]; then
            echo "🔧 Applying KPM patch..."
            ./patch_linux
            if [[ -f "oImage" ]]; then
              rm -f Image
              mv oImage Image
              cp Image $GITHUB_WORKSPACE/AnyKernel3/Image
              echo "✅ KPM patch applied successfully"
            else
              echo "❌ KPM patch failed - oImage not found"
              exit 1
            fi
          else
            echo "❌ Image file not found for KPM patching"
            exit 1
          fi

      - name: 🛠️ Download Zram module (下载Zram附加模块)
        if: ${{ github.event.inputs.lz4kd == 'Open' }}
        run: |
          cd $GITHUB_WORKSPACE/AnyKernel3
          echo "📥 Downloading zram.zip..."
          curl -LO https://raw.githubusercontent.com/Suxiaoqinx/kernel_manifest_OnePlus_Sukisu_Ultra/main/zram.zip
          if [[ -f "zram.zip" ]]; then
            echo "✅ zram.zip downloaded successfully"
            ls -lh zram.zip
          else
            echo "❌ Failed to download zram.zip"
            exit 1
          fi

      - name: 压缩并输出信息
        run: |
          cd $GITHUB_WORKSPACE/AnyKernel3
          # 定义文件名变量
          zip_file="AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}.zip"
    
          # 执行压缩
          echo "正在创建压缩包: $zip_file"
          zip -r "./$zip_file" ./*
    
          # 获取完整路径并输出
          full_path="$(pwd)/$zip_file"
          echo "压缩包已创建在: $full_path"
    
          # 保存为环境变量供后续步骤使用
          echo "ZIP_FULL_PATH=$full_path" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=$zip_file" >> $GITHUB_ENV  # 新增保存文件名变量

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ env.ZIP_FULL_PATH }}  # 使用完整路径

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 检查环境变量
        run: |
          echo "KSUVER: ${{ env.KSUVER }}"
          echo "FEIL: ${{ github.event.inputs.FEIL }}"
    
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips
          
      # 检查下载的文件
      - name: 列出下载的文件
        run: |
          echo "下载的文件列表:"
          ls -lh ./release_zips
          echo "环境变量 ZIP_FILE_NAME: ${{ env.ZIP_FILE_NAME }}"
    
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # 添加或更新这些输入
          tag_name: "${{ github.event.inputs.FEIL }}"
          name: "${{ github.event.inputs.FEIL }}-${{ env.KSUVER }}"
          body: |
            ### 构建信息
            - 📱 Device: ${{ github.event.inputs.FEIL }}
            - 🔧 CPU: ${{ github.event.inputs.CPU }} (${{ github.event.inputs.CPUD }})
            - 🐧 Kernel: ${{ github.event.inputs.KERNEL_VERSION }}
            - 🎯 KSU Version: ${{ env.KSUVER }}
            - 🗜️ LZ4KD: ${{ github.event.inputs.lz4kd }}
            - 🎮 Sched_ext: ${{ github.event.inputs.sched_ext }}
            - 🔐 KPM: ${{ github.event.inputs.KPM_ext }}
            - 推荐系统：ColorOS 15 / RealmeUI 6.0
            - SukiSU管理器下载：[SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            ### ⏫️ 更新内容：
            - 更新SukiSU Ultra至最新版本（${{ env.KSUVER }}）
            - (预留)
            ### 📋 安装方法 | Installation Guide
            1. 若你的手机已经安装了第三方Recovery（如TWRP)，可下载对应机型的AnyKernel刷机包后进入Recovery模式，通过Recovery刷入刷机包后重启设备
            2. 若你的手机之前已有 root 权限，可在手机上安装[HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases)，在HorizonKernelFlasher中刷入AnyKernel刷机包并重启
            3. 若你之前已刷入SukiSU Ultra内核，且SukiSU Ultra管理器已更新至最新版本，可在SukiSU Ultra管理器中直接刷入AnyKernel刷机包并重启
            ※※※刷写内核有风险，为防止出现意外导致手机变砖，在刷入内核前请务必用[KernelFlasher](https://github.com/capntrips/KernelFlasher)等软件备份boot等关键启动分区!※※※
          draft: false
          prerelease: false
          # 关键修复：使用动态文件名
          files: ./release_zips/${{ env.ZIP_FILE_NAME }}
          # 确保其他设置正确
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}
